
import React, { useRef, useEffect, useState } from 'react';
import { GoogleSpreadsheet } from "google-spreadsheet";
import MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';
import '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';
import data from './assets/counties.geojson';
import mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax
mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_KEY;

async function gsheet() {
    console.log(process.env)
    const SPREADSHEET_ID = process.env.REACT_APP_SPREADSHEET_ID;
    const CLIENT_EMAIL = process.env.REACT_APP_GOOGLE_CLIENT_EMAIL;
    const PRIVATE_KEY = process.env.REACT_APP_GOOGLE_SERVICE_PRIVATE_KEY;

    const doc = new GoogleSpreadsheet(SPREADSHEET_ID);
    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: CLIENT_EMAIL,
        private_key: PRIVATE_KEY.replace(/\\n/g, '\n'),
      });
    
      await doc.loadInfo(); // loads document properties and worksheets

      const sheet = doc.sheetsByIndex[0];

      const rows = await sheet.getRows(); 
      console.log(rows);

      const d = {}

      rows.forEach((row) => {
        d[row.county.toLowerCase()] = {
            'phone': row.phone
        }
      });

      return d;
}

export default function App() {
    const mapContainer = useRef(null);
    const map = useRef(null);
    const [lng, setLng] = useState(-80);
    const [lat, setLat] = useState(35.4);
    const [zoom, setZoom] = useState(6);

    useEffect(() => {
        if (map.current) return; // initialize map only once

        
        
        map.current = new mapboxgl.Map({
          container: mapContainer.current,
          style: 'mapbox://styles/mapbox/light-v10',
          center: [lng, lat],
          zoom: zoom,
        });

        map.current.addControl(
            new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            mapboxgl: mapboxgl,
            zoom: zoom,
            })
            );
        
        map.current.addControl(
            new mapboxgl.GeolocateControl({
                positionOptions: {
                    enableHighAccuracy: true
                },
                // When active the map will receive updates to the device's location as it changes.
                trackUserLocation: true,
                // Draw an arrow next to the location dot to indicate which direction the device is heading.
                showUserHeading: true
            })
        );
      });

      useEffect(() => {
        if (!map.current) return; // wait for map to initialize

        map.current.on('move', () => {
          setLng(map.current.getCenter().lng.toFixed(4));
          setLat(map.current.getCenter().lat.toFixed(4));
          setZoom(map.current.getZoom().toFixed(2));
        });

        map.current.on('load', () => {
            map.current.resize();
            /* Add the data to your map as a layer */
            map.current.addSource('counties', {
                type: 'geojson',
                data: data,
                'generateId': true
              });

            map.current.addLayer(
                {
                    id: 'counties',
                    type: 'fill',
                    paint: {
                        'fill-opacity': [
                            'case',
                            ['boolean', ['feature-state', 'hover'], false],
                            0.4,
                            0.2
                            ],
                        "fill-outline-color": "#000",
                        "fill-color": "#000"
                    },
                    source: 'counties'
                },
                'country-label'
            );
        
            map.current.addLayer(
                {
                    id: 'counties-lines',
                    type: 'line',
                    source: 'counties'
                },
                'country-label'
            );

            const info = gsheet();
            info.then((d) => {
                console.log(d)
            
                
            map.current.on('click', 'counties', (e) => {
                new mapboxgl.Popup()
                .setLngLat(e.lngLat)
                .setHTML(`<div><p>${e.features[0].properties.CO_NAME}</p><p>${d[e.features[0].properties.CO_NAME.toLowerCase()]?.phone}</p></div>`)
                .addTo(map.current);
            });

        });
                    
            map.current.on('mouseenter', 'counties', () => {
                map.current.getCanvas().style.cursor = 'pointer';
            });

            let hoveredStateId = null;
            map.current.on('mousemove', 'counties', (e) => {
                if (e.features.length > 0) {
                if (hoveredStateId !== null) {
                map.current.setFeatureState(
                { source: 'counties', id: hoveredStateId },
                { hover: false }
                );
                }
                hoveredStateId = e.features[0].id;
                map.current.setFeatureState(
                { source: 'counties', id: hoveredStateId },
                { hover: true }
                );
                }
                });
            
            map.current.on('mouseleave', 'counties', () => {
                if (hoveredStateId !== null) {
                    map.current.setFeatureState(
                    { source: 'counties', id: hoveredStateId },
                    { hover: false }
                    );
                    }
                    hoveredStateId = null;
                map.current.getCanvas().style.cursor = '';
            });
          });
      });

      return (
        <div>
            <div ref={mapContainer} className="map-container" />
        </div>
        );
}
