{"version":3,"sources":["assets/counties.geojson","App.js","index.js"],"names":["App","mapContainer","useRef","map","lng","setLng","useState","lat","setLat","zoom","setZoom","useEffect","current","mapboxgl","Map","container","style","center","addControl","MapboxGeocoder","accessToken","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","showUserHeading","on","getCenter","toFixed","getZoom","resize","addSource","type","data","addLayer","id","paint","source","async","console","log","process","doc","GoogleSpreadsheet","useServiceAccountAuth","client_email","private_key","replace","loadInfo","sheet","sheetsByIndex","rows","getRows","d","forEach","row","county","toLowerCase","phone","gsheet","then","e","Popup","setLngLat","lngLat","setHTML","features","properties","CO_NAME","addTo","getCanvas","cursor","hoveredStateId","length","setFeatureState","hover","ref","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d8460f4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/counties.8a9f8c1a.geojson\";","\nimport React, { useRef, useEffect, useState } from 'react';\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport data from './assets/counties.geojson';\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_KEY;\n\nasync function gsheet() {\n    console.log(process.env)\n    const SPREADSHEET_ID = process.env.REACT_APP_SPREADSHEET_ID;\n    const CLIENT_EMAIL = process.env.REACT_APP_GOOGLE_CLIENT_EMAIL;\n    const PRIVATE_KEY = process.env.REACT_APP_GOOGLE_SERVICE_PRIVATE_KEY;\n\n    const doc = new GoogleSpreadsheet(SPREADSHEET_ID);\n    await doc.useServiceAccountAuth({\n        // env var values are copied from service account credentials generated by google\n        // see \"Authentication\" section in docs for more info\n        client_email: CLIENT_EMAIL,\n        private_key: PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\n      });\n    \n      await doc.loadInfo(); // loads document properties and worksheets\n\n      const sheet = doc.sheetsByIndex[0];\n\n      const rows = await sheet.getRows(); \n      console.log(rows);\n\n      const d = {}\n\n      rows.forEach((row) => {\n        d[row.county.toLowerCase()] = {\n            'phone': row.phone\n        }\n      });\n\n      return d;\n}\n\nexport default function App() {\n    const mapContainer = useRef(null);\n    const map = useRef(null);\n    const [lng, setLng] = useState(-80);\n    const [lat, setLat] = useState(35.4);\n    const [zoom, setZoom] = useState(6);\n\n    useEffect(() => {\n        if (map.current) return; // initialize map only once\n\n        \n        \n        map.current = new mapboxgl.Map({\n          container: mapContainer.current,\n          style: 'mapbox://styles/mapbox/light-v10',\n          center: [lng, lat],\n          zoom: zoom,\n        });\n\n        map.current.addControl(\n            new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl,\n            zoom: zoom,\n            })\n            );\n        \n        map.current.addControl(\n            new mapboxgl.GeolocateControl({\n                positionOptions: {\n                    enableHighAccuracy: true\n                },\n                // When active the map will receive updates to the device's location as it changes.\n                trackUserLocation: true,\n                // Draw an arrow next to the location dot to indicate which direction the device is heading.\n                showUserHeading: true\n            })\n        );\n      });\n\n      useEffect(() => {\n        if (!map.current) return; // wait for map to initialize\n\n        map.current.on('move', () => {\n          setLng(map.current.getCenter().lng.toFixed(4));\n          setLat(map.current.getCenter().lat.toFixed(4));\n          setZoom(map.current.getZoom().toFixed(2));\n        });\n\n        map.current.on('load', () => {\n            map.current.resize();\n            /* Add the data to your map as a layer */\n            map.current.addSource('counties', {\n                type: 'geojson',\n                data: data,\n                'generateId': true\n              });\n\n            map.current.addLayer(\n                {\n                    id: 'counties',\n                    type: 'fill',\n                    paint: {\n                        'fill-opacity': [\n                            'case',\n                            ['boolean', ['feature-state', 'hover'], false],\n                            0.4,\n                            0.2\n                            ],\n                        \"fill-outline-color\": \"#000\",\n                        \"fill-color\": \"#000\"\n                    },\n                    source: 'counties'\n                },\n                'country-label'\n            );\n        \n            map.current.addLayer(\n                {\n                    id: 'counties-lines',\n                    type: 'line',\n                    source: 'counties'\n                },\n                'country-label'\n            );\n\n            const info = gsheet();\n            info.then((d) => {\n                console.log(d)\n            \n                \n            map.current.on('click', 'counties', (e) => {\n                new mapboxgl.Popup()\n                .setLngLat(e.lngLat)\n                .setHTML(`<div><p>${e.features[0].properties.CO_NAME}</p><p>${d[e.features[0].properties.CO_NAME.toLowerCase()]?.phone}</p></div>`)\n                .addTo(map.current);\n            });\n\n        });\n                    \n            map.current.on('mouseenter', 'counties', () => {\n                map.current.getCanvas().style.cursor = 'pointer';\n            });\n\n            let hoveredStateId = null;\n            map.current.on('mousemove', 'counties', (e) => {\n                if (e.features.length > 0) {\n                if (hoveredStateId !== null) {\n                map.current.setFeatureState(\n                { source: 'counties', id: hoveredStateId },\n                { hover: false }\n                );\n                }\n                hoveredStateId = e.features[0].id;\n                map.current.setFeatureState(\n                { source: 'counties', id: hoveredStateId },\n                { hover: true }\n                );\n                }\n                });\n            \n            map.current.on('mouseleave', 'counties', () => {\n                if (hoveredStateId !== null) {\n                    map.current.setFeatureState(\n                    { source: 'counties', id: hoveredStateId },\n                    { hover: false }\n                    );\n                    }\n                    hoveredStateId = null;\n                map.current.getCanvas().style.cursor = '';\n            });\n          });\n      });\n\n      return (\n        <div>\n            <div ref={mapContainer} className=\"map-container\" />\n        </div>\n        );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}