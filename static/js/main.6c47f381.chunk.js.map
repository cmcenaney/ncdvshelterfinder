{"version":3,"sources":["assets/counties.geojson","App.js","index.js"],"names":["tooltip","county","ttData","html","forEach","d","link","name","phone","async","gsheet","doc","GoogleSpreadsheet","process","useServiceAccountAuth","client_email","private_key","replace","loadInfo","sheet","sheetsByIndex","rows","getRows","p","row","l","toLowerCase","push","reduce","r","a","Object","create","App","mapContainer","useRef","map","lng","setLng","useState","lat","setLat","zoom","setZoom","useEffect","current","mapboxgl","Map","container","style","center","addControl","MapboxGeocoder","accessToken","bbox","on","results","result","context","text","coord","console","log","then","Popup","setLngLat","setHTML","addTo","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","fitBoundsOptions","maxZoom","getCenter","toFixed","getZoom","resize","addSource","type","data","addLayer","id","paint","source","e","lngLat","features","properties","CO_NAME","getCanvas","cursor","hoveredStateId","length","setFeatureState","hover","ref","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c47f381.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/counties.8a9f8c1a.geojson\";","\nimport React, { useRef, useEffect, useState } from 'react';\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport data from './assets/counties.geojson';\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_KEY;\n\nfunction tooltip(county, ttData) {\n\n    let html = `<h3 class=\"county-title\">${county} County</h3>`\n\n    if (ttData) {\n    ttData.forEach((d) => {\n        if (d.link){\n        html += `<div class=\"info\"><a href=\"http://${d.link}\" target=\"_blank\"><p class=\"dv-title\">${d.name}</p></a>`\n        } else {\n            html += `<div class=\"info\"><p class=\"dv-title\">${d.name}</p>`\n        }\n        html += `<p class=\"phone\">${d.phone}</p></div>`;\n    });\n}\n\n\n    return html;\n}\n\nasync function gsheet() {\n    const SPREADSHEET_ID = process.env.REACT_APP_SPREADSHEET_ID;\n    const CLIENT_EMAIL = process.env.REACT_APP_GOOGLE_CLIENT_EMAIL;\n    const PRIVATE_KEY = process.env.REACT_APP_GOOGLE_SERVICE_PRIVATE_KEY;\n\n    const doc = new GoogleSpreadsheet(SPREADSHEET_ID);\n    await doc.useServiceAccountAuth({\n        // env var values are copied from service account credentials generated by google\n        // see \"Authentication\" section in docs for more info\n        client_email: CLIENT_EMAIL,\n        private_key: PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\n      });\n    \n      await doc.loadInfo(); // loads document properties and worksheets\n\n      const sheet = doc.sheetsByIndex[0];\n\n      const rows = await sheet.getRows();\n\n\n\n      const d = {}\n\n      const p = []\n\n      rows.forEach((row) => {\n        const l = {}\n        l.county = row.county.toLowerCase()\n        l.phone = row.phone\n        l.name = row.name\n        l.link = row.link\n\n        p.push(l)\n\n        d[row.county.toLowerCase()] = {\n            'phone': row.phone,\n            'name': row.name,\n            'link': row.link\n        }\n      });\n\n      const y = p.reduce(function (r, a) {\n        r[a.county] = r[a.county] || [];\n        r[a.county].push(a);\n        return r;\n    }, Object.create(null));\n\n      return y;\n}\n\nexport default function App() {\n    const mapContainer = useRef(null);\n    const map = useRef(null);\n    const [lng, setLng] = useState(-80);\n    const [lat, setLat] = useState(35.4);\n    const [zoom, setZoom] = useState(6);\n\n    useEffect(() => {\n        if (map.current) return; // initialize map only once\n\n        \n        \n        map.current = new mapboxgl.Map({\n          container: mapContainer.current,\n          style: 'mapbox://styles/mapbox/light-v10',\n          center: [lng, lat],\n          zoom: zoom,\n          \n        });\n\n        map.current.addControl(\n            new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl,\n            zoom: zoom,\n            bbox: [-84.32178200052,33.85116926668266,-75.45981513195132,36.5881334409244],\n\n            }).on('result', function(results) {\n                const county = results.result.context[2].text.toLowerCase().replace(' county', '');\n                const coord = {lng: results.result.center[0], lat: results.result.center[1]}\n                console.log(coord)\n                const info = gsheet();\n                info.then((d) => {\n                    new mapboxgl.Popup()\n                    .setLngLat(coord)\n                    .setHTML(tooltip(county, d[county]))\n                    .addTo(map.current);\n                });\n                \n             })\n        );\n        \n        map.current.addControl(\n            new mapboxgl.GeolocateControl({\n                positionOptions: {\n                    enableHighAccuracy: true\n                },\n                // When active the map will receive updates to the device's location as it changes.\n                trackUserLocation: true,\n                // Draw an arrow next to the location dot to indicate which direction the device is heading.\n                // showUserHeading: true,\n                fitBoundsOptions: { maxZoom: zoom}\n            })\n        );\n      });\n\n      useEffect(() => {\n        if (!map.current) return; // wait for map to initialize\n\n        map.current.on('move', () => {\n          setLng(map.current.getCenter().lng.toFixed(4));\n          setLat(map.current.getCenter().lat.toFixed(4));\n          setZoom(map.current.getZoom().toFixed(2));\n        });\n\n        map.current.on('load', () => {\n            map.current.resize();\n            /* Add the data to your map as a layer */\n            map.current.addSource('counties', {\n                type: 'geojson',\n                data: data,\n                'generateId': true\n              });\n\n            map.current.addLayer(\n                {\n                    id: 'counties',\n                    type: 'fill',\n                    paint: {\n                        'fill-opacity': [\n                            'case',\n                            ['boolean', ['feature-state', 'hover'], false],\n                            0.4,\n                            0.2\n                            ],\n                        \"fill-outline-color\": \"#000\",\n                        \"fill-color\": \"#000\"\n                    },\n                    source: 'counties'\n                },\n                'country-label'\n            );\n        \n            map.current.addLayer(\n                {\n                    id: 'counties-lines',\n                    type: 'line',\n                    source: 'counties'\n                },\n                'country-label'\n            );\n\n            const info = gsheet();\n            info.then((d) => {\n            \n                \n            map.current.on('click', 'counties', (e) => {\n                console.log(e.lngLat)\n                new mapboxgl.Popup()\n                .setLngLat(e.lngLat)\n                .setHTML(tooltip(e.features[0].properties.CO_NAME.toLowerCase(), d[e.features[0].properties.CO_NAME.toLowerCase()]))\n                .addTo(map.current);\n            });\n\n        });\n                    \n            map.current.on('mouseenter', 'counties', () => {\n                map.current.getCanvas().style.cursor = 'pointer';\n            });\n\n            let hoveredStateId = null;\n            map.current.on('mousemove', 'counties', (e) => {\n                if (e.features.length > 0) {\n                if (hoveredStateId !== null) {\n                map.current.setFeatureState(\n                { source: 'counties', id: hoveredStateId },\n                { hover: false }\n                );\n                }\n                hoveredStateId = e.features[0].id;\n                map.current.setFeatureState(\n                { source: 'counties', id: hoveredStateId },\n                { hover: true }\n                );\n                }\n                });\n            \n            map.current.on('mouseleave', 'counties', () => {\n                if (hoveredStateId !== null) {\n                    map.current.setFeatureState(\n                    { source: 'counties', id: hoveredStateId },\n                    { hover: false }\n                    );\n                    }\n                    hoveredStateId = null;\n                map.current.getCanvas().style.cursor = '';\n            });\n          });\n      });\n\n      return (\n        <div>\n            <div ref={mapContainer} className=\"map-container\" />\n        </div>\n        );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}