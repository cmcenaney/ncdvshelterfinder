{"version":3,"sources":["assets/counties.geojson","App.js","index.js"],"names":["async","gsheet","doc","GoogleSpreadsheet","process","useServiceAccountAuth","client_email","private_key","replace","loadInfo","sheet","sheetsByIndex","rows","getRows","d","p","forEach","row","l","county","toLowerCase","phone","name","link","push","reduce","r","a","Object","create","App","mapContainer","useRef","map","lng","setLng","useState","lat","setLat","zoom","setZoom","countyName","setCountyName","setName","setPhone","setLink","no","setNo","maybe","setMaybe","savedData","setSavedData","JSON","parse","localStorage","getItem","useEffect","current","mapboxgl","Map","container","style","center","addControl","MapboxGeocoder","accessToken","bbox","on","results","result","context","text","coord","console","log","then","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","fitBoundsOptions","maxZoom","getCenter","toFixed","getZoom","resize","addSource","type","data","matchExpression","key","cname","split","toUpperCase","color","addLayer","id","paint","source","e","lngLat","features","properties","CO_NAME","getCanvas","cursor","hoveredStateId","length","setFeatureState","hover","class","className","href","target","dangerouslySetInnerHTML","__html","onChange","obk","m","checked","setItem","stringify","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f365504e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/counties.8a9f8c1a.geojson\";","\nimport React, { useRef, useEffect, useState } from 'react';\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport data from './assets/counties.geojson';\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_KEY;\n\nfunction tooltip(county, ttData) {\n\n    let html = `<h3 class=\"county-title\">${county} County</h3>`\n\n    if (ttData) {\n    ttData.forEach((d) => {\n        if (d.link){\n            const p = d.link.split('//')[1]\n        html += `<div class=\"info\"><a href=\"https://${p}\" target=\"_blank\"><p class=\"dv-title\">${d.name}</p></a>`\n        } else {\n            html += `<div class=\"info\"><p class=\"dv-title\">${d.name}</p>`\n        }\n        html += `<p class=\"phone\">${d.phone}</p></div>`;\n    });\n}\n\n\n    return html;\n}\n\nasync function gsheet() {\n    const SPREADSHEET_ID = process.env.REACT_APP_SPREADSHEET_ID;\n    const CLIENT_EMAIL = process.env.REACT_APP_GOOGLE_CLIENT_EMAIL;\n    const PRIVATE_KEY = process.env.REACT_APP_GOOGLE_SERVICE_PRIVATE_KEY;\n\n    const doc = new GoogleSpreadsheet(SPREADSHEET_ID);\n    await doc.useServiceAccountAuth({\n        // env var values are copied from service account credentials generated by google\n        // see \"Authentication\" section in docs for more info\n        client_email: CLIENT_EMAIL,\n        private_key: PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\n      });\n    \n      await doc.loadInfo(); // loads document properties and worksheets\n\n      const sheet = doc.sheetsByIndex[0];\n\n      const rows = await sheet.getRows();\n\n\n\n      const d = {}\n\n      const p = []\n\n      rows.forEach((row) => {\n        const l = {}\n        l.county = row.county.toLowerCase()\n        l.phone = row.phone\n        l.name = row.name\n        l.link = row.link\n\n        p.push(l)\n\n        d[row.county.toLowerCase()] = {\n            'phone': row.phone,\n            'name': row.name,\n            'link': row.link\n        }\n      });\n\n      const y = p.reduce(function (r, a) {\n        r[a.county] = r[a.county] || [];\n        r[a.county].push(a);\n        return r;\n    }, Object.create(null));\n\n      return y;\n}\n\nexport default function App() {\n    const mapContainer = useRef(null);\n    const map = useRef(null);\n    const [lng, setLng] = useState(-80);\n    const [lat, setLat] = useState(35.4);\n    const [zoom, setZoom] = useState(6.5);\n    const [countyName, setCountyName] = useState('');\n    const [name, setName] = useState('');\n    const [phone, setPhone] = useState('');\n    const [link, setLink] = useState('');\n    const [no, setNo] = useState(false);\n    const [maybe, setMaybe] = useState(false);\n    const [savedData, setSavedData] = useState(() => {\n        // getting stored value\n        const saved = JSON.parse(localStorage.getItem('savedData'));\n        return saved;\n      });\n\n    useEffect(() => {\n        if (map.current) return; // initialize map only once\n\n        \n        \n        map.current = new mapboxgl.Map({\n          container: mapContainer.current,\n          style: 'mapbox://styles/mapbox/light-v10',\n          center: [lng, lat],\n          zoom: zoom,\n          \n        });\n\n        map.current.addControl(\n            new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl,\n            zoom: zoom,\n            bbox: [-84.32178200052,33.85116926668266,-75.45981513195132,36.5881334409244],\n\n            }).on('result', function(results) {\n                const county = results.result.context[2].text.toLowerCase().replace(' county', '');\n                const coord = {lng: results.result.center[0], lat: results.result.center[1]}\n                console.log(coord)\n                const info = gsheet();\n                info.then((d) => {\n                    setCountyName(county)\n                    setName(d[county][0].name)\n                    setLink(d[county][0].link)\n                    setPhone(d[county][0].phone)\n                    // new mapboxgl.Popup()\n                    // .setLngLat(coord)\n                    // .setHTML(tooltip(county, d[county]))\n                    // .addTo(map.current);\n                });\n                \n             })\n        );\n        \n        map.current.addControl(\n            new mapboxgl.GeolocateControl({\n                positionOptions: {\n                    enableHighAccuracy: true\n                },\n                // When active the map will receive updates to the device's location as it changes.\n                trackUserLocation: true,\n                // Draw an arrow next to the location dot to indicate which direction the device is heading.\n                // showUserHeading: true,\n                fitBoundsOptions: { maxZoom: zoom}\n            })\n        );\n      });\n\n      useEffect(() => {\n        if (!map.current) return; // wait for map to initialize\n\n        map.current.on('move', () => {\n          setLng(map.current.getCenter().lng.toFixed(4));\n          setLat(map.current.getCenter().lat.toFixed(4));\n          setZoom(map.current.getZoom().toFixed(2));\n        });\n\n        map.current.on('load', () => {\n            \n\n            map.current.resize();\n            /* Add the data to your map as a layer */\n            map.current.addSource('counties', {\n                type: 'geojson',\n                data: data,\n                'generateId': true\n              });\n\n            \n              const matchExpression = ['match', ['get', 'CO_NAME']];\n\n              for (const key in savedData) {\n               \n                const cname = key.split('_')[0].toUpperCase();\n                const type = key.split('_')[1];\n                \n                // const color = type === 'no' && savedData[key] ? \"blue\": \"orange\";\n                \n\n                let color = \"black\";\n\n                if (savedData[key]){\n                    if (type === 'no') {\n                        color = \"#A9A9A9\";\n                    } else {\n                        color = \"#AFE1AF\"\n                    }\n\n                    console.log(cname)\n                    console.log(type)\n                    console.log(savedData[key])\n                    console.log(color)\n\n                    matchExpression.push(cname, color);\n                }\n\n               \n\n                // matchExpression.push(cname, color);\n                \n                // if (!matchExpression.contains(cname)){\n                //     matchExpression.push(cname, 'blue');\n                // }\n                \n            }\n            matchExpression.push('rgba(0, 0, 0, 0)');\n\n            console.log(matchExpression)\n\n            //   for (const key in savedData) {\n            //     console.log(savedData[key])\n            //     const cname = key.split('_')[0].toUpperCase();\n                \n            //       map.current.setFeatureState(\n            //     {\n            //       source: 'counties',\n            //       id: cname,\n            //     },\n            //     {\n            //       no: savedData[key]\n            //     }\n            //   );\n                \n            //   }\n\n            \n            \n            \n\n            map.current.addLayer(\n                {\n                    id: 'counties',\n                    type: 'fill',\n                    paint: {\n                        'fill-opacity': [\n                            'case',\n                            ['boolean', ['feature-state', 'hover'], false],\n                            0.9,\n                            0.7\n                            ],\n                        \"fill-outline-color\": \"#000\",\n                        // 'fill-color': matchExpression,\n                        // \"fill-color\": \"orange\",\n                        \"fill-color\": savedData ? matchExpression : 'white',\n                        // \"fill-color\": matchExpression,\n                    },\n                    source: 'counties'\n                },\n                'country-label'\n            );\n\n            // const cList = [];\n\n            \n\n            // console.log(data)\n\n            // map.current.setPaintProperty(\n            //     'counties', \n            //     'fill-color',\n            //     ['match', ['get', 'no'], true, \"orange\" , \"blue\"]\n            //   );\n\n            //   map.setFeatureState(\n            //     {\n            //       source: 'counties',\n            //       sourceLayer: 'counties',\n            //       id: data['item.STATE_ID'].feature_id\n            //     },\n            //     {\n            //       no: item.no\n            //     }\n            //   );\n\n            // map.setPaintProperty('myLayer', 'fill-color', [\n            //     'match',\n            //     ['get', 'CO_NAME'],\n            //     layer.value, '#fbb03b',\n            //     /* other */ '#ccc'\n            //   ]);\n            \n           \n\n            // map.current.setPaintProperty(\n            //     'counties', \n            //     'fill-color',\n            //     ['match', ['get', 'CO_NAME'], 'CHATHAM', \"orange\" , \"blue\"]\n            //   );\n        \n            map.current.addLayer(\n                {\n                    id: 'counties-lines',\n                    type: 'line',\n                    source: 'counties'\n                },\n                'country-label'\n            );\n\n            map.current.addLayer({\n                'id': 'poi-labels',\n                'type': 'symbol',\n                'source': 'counties',\n                'layout': {\n                    'text-field': ['get', 'CO_NAME'],\n                    'text-size': 10\n                    // 'text-variable-anchor': ['top', 'bottom', 'left', 'right'],\n                    // 'text-radial-offset': 0.5,\n                    // 'text-justify': 'auto',\n                }\n                });\n\n            const info = gsheet();\n            info.then((d) => {\n            \n                \n            map.current.on('click', 'counties', (e) => {\n                \n                console.log(e.lngLat)\n                const p = d[e.features[0].properties.CO_NAME.toLowerCase()][0];\n                const l = e.features[0].properties.CO_NAME.toLowerCase();\n                // const n = JSON.parse(localStorage.getItem(`${l}_no`));\n                // const m = JSON.parse(localStorage.getItem(`${l}_maybe`));\n                \n                // setNo(n)\n                // setMaybe(m)\n\n                setCountyName(l);\n                setName(p.name)\n                setLink(p.link)\n                setPhone(p.phone)\n                // new mapboxgl.Popup()\n                \n                // .setLngLat(e.lngLat)\n                // .setHTML(tooltip(e.features[0].properties.CO_NAME.toLowerCase(), d[e.features[0].properties.CO_NAME.toLowerCase()]))\n                // .addTo(map.current);\n            });\n\n        });\n                    \n            map.current.on('mouseenter', 'counties', () => {\n                map.current.getCanvas().style.cursor = 'pointer';\n            });\n\n            let hoveredStateId = null;\n            map.current.on('mousemove', 'counties', (e) => {\n                if (e.features.length > 0) {\n                if (hoveredStateId !== null) {\n                map.current.setFeatureState(\n                { source: 'counties', id: hoveredStateId },\n                { hover: false }\n                );\n                }\n                hoveredStateId = e.features[0].id;\n                map.current.setFeatureState(\n                { source: 'counties', id: hoveredStateId },\n                { hover: true }\n                );\n                }\n                });\n            \n            map.current.on('mouseleave', 'counties', () => {\n                if (hoveredStateId !== null) {\n                    map.current.setFeatureState(\n                    { source: 'counties', id: hoveredStateId },\n                    { hover: false }\n                    );\n                    }\n                    hoveredStateId = null;\n                map.current.getCanvas().style.cursor = '';\n            });\n          });\n      });\n\n      const handleNo = (e) => {\n        const obk = JSON.parse(localStorage.getItem('savedData')) || {};\n        console.log(obk)\n        const n = `${countyName}_no`;\n        const m = `${countyName}_maybe`;\n        obk[n] = e.target.checked;\n        obk[m] = !e.target.checked;\n\n        localStorage.setItem('savedData', JSON.stringify(obk));\n\n        \n\n        \n      }\n\n      const checkNo = () => {\n        console.log('yo')\n        return true;\n        // return localStorage.getItem(`${countyName}_no`);\n      }\n\n      const handleMaybe = (e) => {\n        const obk = JSON.parse(localStorage.getItem('savedData')) || {};\n        const n = `${countyName}_no`;\n        const m = `${countyName}_maybe`;\n        obk[n] = !e.target.checked;\n        obk[m] = e.target.checked;\n\n        localStorage.setItem('savedData', JSON.stringify(obk));\n      }\n\n      return (\n        <div>\n            <div class=\"header\">\n            <div class=\"title\">Title here</div>\n            <div class=\"description\">Description here</div>\n            </div>\n            \n            \n            {countyName && (\n            <><div className=\"sidebar\">\n                      <div class=\"countyname\">\n                          <p>{countyName} County</p>\n                      </div>\n                      <a href={link} target=\"_blank\"><p>{name}</p></a>\n                      <p dangerouslySetInnerHTML={{ __html: phone }} />\n                      <p>Availability</p>\n                      <input type=\"checkbox\" onChange={handleNo}></input> No\n                      <br></br>\n                      <input type=\"checkbox\" onChange={handleMaybe}></input> Maybe\n                  </div>\n                  \n                  </>\n            )}\n\n<div ref={mapContainer} className=\"map-container\" />\n        </div>\n        );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}